x2 = runif(8,15,25)
y2 = 2.5*x2 - 1.0 + runif(8,-6,6)
points(x2,y2,col=4,pch=3)
legend(14,70,c("Original","one","two"),col=c(1,3,4),pch=(1,2,3))
legend(14,70,c("Original","one","two"),col=c(1,3,4),pch=c(1,2,3))
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
xHigh = x
yHigh = y + abs(rnorm(10,sd=3.5))
xLow=x
yLow = y - abs(rnorm(10,sd=3.1))
arrows(xHigh,yHigh,xLow,yLow,col=2,angel=90,length=0.1,code=3)
arrows(xHigh,yHigh,xLow,yLow,col=2,angle=90,length=0.1,code=3)
numbderWhite = rhyper(400,4,5,3)
warning()
warnings()
numberWhite = rhyper(400,4,5,3)
numberChipped = rhyper(400,2,7,3)
par(mfrow=c(1,2))
plot(numberWhite,numberChipped,xlab="Number White Marbles Drawn",ylab="Number Chipped Marbles Drawn",main="Pulling Marbles")
plot(jitter(numberWhite),jitter(numberChipped),xlab="Number White Marbles Drawn",ylab="Number Chipped Marbles Drawn",main="Pulling Marbles")
par(mfrow=c(2,3))
boxplot(numberWhite,main="first plot")
boxplot(numberChipped,main="second plot")
plot(jitter(numberWhite),jitter(numberChipped),xlab="Number White Marbles Drawn",ylab="Number Chipped Marbles Drawn",main="Pulling Marbles with Jitter")
hist(numberWhite,main="fourth plot")
hist(numberChipped,main="fifth plot")
mosaicplot(table(numberWhite,numberChipped),main="sixth plot")
numberWhite = rhyper(30,4,5,3)
numberWhite
numberChipped = rhyper(30,2,7,3)
numberChipped
smoothscatter(numberWhite,numberChipped,xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
smoothScatter(numberWhite,numberChipped,xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
par(1,1)
smoothScatter(numberWhite,numberChipped,xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
par(mfrow=c(1,1))
smoothScatter(numberWhite,numberChipped,xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
grid(4,3)
uData = rnorm(20)
vData = rnorm(20,mean=5)
wData = uData + 2*vData + rnorm(20,sd=0.5)
xData = -2*uData+rnorm(20,sd=0.1)
yData = 3*vData+rnorm(20,sd=2.5)
d = data.frame(u=uData,v=vData,w=wData,x=xData,y=yData)
pairs(d)
x = c(-1,1,1,-1,-1)
y = c(-1,-1,1,1,-1)
plot(x,y)
polygon(x,y,col='blue')
stdDev = 0.75
x = seq(-5,5,by=0.01)
x
y = dnorm(x,sd=stdDev)
right = qnorm(0.95,sd=stdDev)
plot(x,y,type="l",xaxt="n",ylab="p",xlab=expression(paste('Assumed Distribution of ',bar(x))),axes=FALSE,ylim=c(0,max(y)*1.05),xlim=c(min(x),max(x)),frame.plot=FALSE)
axis(1,at=c(-5,right,0,5),pos = c(0,0),labels=c(expression(' '),expression(bar(x)[cr]),expression(mu[0]),expression(' ')))
axis(2)
xReject = seq(right, 5,by=0.01)
yReject = dnorm(xReject,sd=stdDev)
polygon(c(xReject,xReject[length(xReject)],xReject[1]),c(yReject,0,0),col='red')
x = seq(0,2*pi,by=pi/100)
y = x
xg = (x*0+1) %*% t(y)
yg = (x) %*% t(y*0+1)
f = sin(xg+yg)
persp(x,y,f,theta=-10,phi=40)
summary(beaver1)
?dnorm
y = dnorm(x,sd=stdDev)
dnrom(0)
dnorm(0)
dnorm(0,mean=0,sd=1)
dnorm(0,mean=10000000000,sd=1)
dnorm(0,mean=10000000000,sd=10000000000000000)
dnorm(0,mean=10,sd=1)
x = seq(-20,20,by=.1)
y = dnorm(x)
plot(x,y)
y = dnorm(x,2)
plot(x,y)
y = dnorm(x,2,2)
plot(x,y)
?dnorm
mean=summary(beaver1)$temp
mean=summary(beaver1$temp)
mean=summary(beaver1$temp).mean
mean=summary(beaver1)$temp
y = dnorm(x,mean(beaver1$temp),std(beaver1$temp))
?mean
?stdev
?stddev
?std
y = dnorm(x,mean(beaver1$temp),sd(beaver1$temp))
summary(beaver)
summary(beaver1)
y = dnorm(30:0.1:40,mean(beaver1$temp),sd(beaver1$temp))
y = dnorm(seq(30,40,by=0.1),mean(beaver1$temp),sd(beaver1$temp))
x=seq(30,40,by=0.1)
plot(x,y)
string = "beaver1$temp"
?eval
eval(string)
local(string)
eval(2 ^ 2 ^ 3)
expression(string)
library("scidb")
library("scidb")
scidbconnect()
a <- as.scidb(matrix(rnorm(500*500),500))
install_github("SciDBR","Paradigm4")
library("scidb")
library(scidb)
install.packages('scidb')
library(scidb)
library(scidb)
library("scidb")
library('devtools')
install.packages()
library('dev_tools')
library('devtools')
install_github("SciDBR","paradigm4",quick=TRUE)
install.packages
install.packages("devtools", dependencies = TRUE)
library('devtools')
library('devtools')
install_github("SciDBR","paradigm4",quick=TRUE)
install.packages("devtools", dependencies = TRUE)
library('devtools')
install_github("SciDBR","paradigm4",quick=TRUE)
library('scidb')
scidb --version
which scidb
numberWhite = rhyper(30,4,5,3)
numberChipped = rhyper(30,2,7,3)
install.packages('shiny')
run_example("02_text")
runExample("02_text")
library(shiny)
runExample("02_text")
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
h1("My title")
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/noodle')
shiny::runApp('shiny_projects/noodle')
shiny::runApp('shiny_projects/noodle')
shiny::runApp('shiny_projects/noodle')
shiny::runApp('shiny_projects/noodle')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
counties <- read("~/shiny_projects/census_app/data/counties.rds")
counties <- readRDS("~/shiny_projects/census_app/data/counties.rds")
summary(counties)
head(counties)
install.packages(c("maps","mapproj"))
library(maps)
library(mapproj)
source("census_app/helpers.R")
source("~/shiny_projects/census_app/helpers.R")
percent_map(counties$white, "darkgreen", "% white")
shiny::runApp('shiny_projects/census_app')
shiny::runApp('shiny_projects/census_app')
shiny::runApp('shiny_projects/census_app')
shiny::runApp('shiny_projects/census_app')
shiny::runApp('shiny_projects/census_app')
runApp('stock_vis')
runApp('~/shiny_projects/stock_vis')
install.packages(quantmod)
install.packages('quantmod')
runApp('~/shiny_projects/stock_vis')
shiny::runApp('edsa/edsa_app')
dbDisconnect(con)
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
dbDisconnect(con)
shiny::runApp('edsa/edsa_app')
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
shiny::runApp('edsa/edsa_app')
dbDisconnect(con)
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('shiny_projects/html_tag_examples')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
install.packages('PKI')
install.packages('openssl')
install.packages('libssl-dev')
install.packages('openssl-devel')
install.packages('openssl-devel')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
library(help = "datasets")
shiny::runApp('edsa/edsa_app/select_project')
shiny::runApp('shiny_projects/widget_examples')
plot(x,y)
graph(x,y)
shiny::runApp('edsa/edsa_app/select_project')
shiny::runApp('edsa/edsa_app/select_project')
shiny::runApp('edsa/edsa_app/select_project')
shiny::runApp('edsa/edsa_app/select_project')
shiny::runApp('edsa/edsa_app/select_project')
shiny::runApp('edsa/edsa_app/select_project')
shiny::runApp('edsa/edsa_app/select_project')
x = c(1, 2, 3, 4)
y = c(-1, 0, 2, 3)
plot(x,y)
line(x,y)
lines(x,y)
lines(x,y, smooth(x))
lines(x,y, smooth()
)
lines(x,y, smooth(x))
plot(x,y, type='l')
lines(smooth.spline(x,y,df=10), col="red")
lines(smooth.spline(x,y,df=1), col="red")
lo <- loess(y~x)
lines(predict(lo), col='red', lwd=2)
plot(x,y)
lines(predict(lo), col='red', lwd=2)
plot(0,0)
lines(predict(lo), col='red', lwd=2)
lines(predict(lo), col='red', lwd=2)
plot.window(0, 0)
plot.window(10,10)
plot.window(c(0,10),c(0,10))
lines(predict(lo), col='red', lwd=2)
plot.new(c(0,10),c(0,10))
plot.new()
lines(predict(lo), col='red', lwd=2)
plot(x,y,type="n")
lines(predict(lo), col='red', lwd=2)
shiny::runApp('edsa/edsa_app/select_project')
shiny::runApp('edsa/edsa_app/select_project')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
Error in xy.coords(x, y, xlabel, ylabel, log) :
'x' and 'y' lengths differ
drv <- dbDriver("PostgreSQL")
dbConnect(drv,
dbname = "edsa",
user   = "llschlit")
con <- dbConnect(drv,
dbname = "edsa",
user   = "llschlit")
query <- fn$identity("SELECT $column
FROM $table;
")
result <- dbGetQuery(con, query)
library(gsubfn)
result <- dbGetQuery(con, query)
library(RPostgreSQL)
library(DBI)
result <- dbGetQuery(con, query)
query <- fn$identity("SELECT reference_wfm
FROM jbrown10210006;
")
result <- dbGetQuery(con, query)
dbDisconnect(con)
x <- nrow(result)
x
y <- c(do.call("cbind", result))
summary(y)
nrow(y)
xcount <- x
x <- seq(1:xcount)
x
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
summary(result)
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/select_project')
min(result)
min(x)
max(x)
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
x <- c(1, 2, 3, 4)
y <- c(5, 4, 3, 2)
wfm <- c(x, y)
wfm
wfm$x
wfm.x
wfm[1]
list(x,y)
list$x
list.x
list[x]
list[1]
wfm <- list(x,y)
wfm$x
wfm[x]
wfm <- list(x,y)
wfm[x]
wfm
wfm[1]
wfm <- list()
wfm
wfm[1]
wfm[1] = c(1, 2, 3)
wfm <- list(NULL)
wfm
wfm[1] <- c(1,2,3)
x
y
wfm <- list(x,y)
shiny::runApp('edsa/edsa_app/visualize_data')
typeof(wfm[1])
array(x, y)
a <- array(x, y)
a[x]
a[y]
x
y
a <- array(c(1, 2, 3), c(9, 8, 7))
a[1]
a
x
y
wfm <- cbind(x, y)
wfm
wfm[x]
wfm[y]
typeof(wfm[x])
typeof(wfm)
a
b
b <- NULL
b
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
wfm <- NULL
wfm <- cbind(x,y)
wfm
wfm[x]
wfm[y]
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
a <- c(1, 2, 3)
b <- c(9, 8, 7)
foo <- cbind(a,b)
foo
foo[1]
foo[a]
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp('edsa/edsa_app/visualize_data')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
wfm
foo
typeof(foo)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname = "edsa",
user   = "llschlit")
result <- dbGetQuery(con, "SELECT COUNT(*) FROM jbrown10210007;")
result
result[count]
result[1]
count <- result[1]
count
typeof(result)
count <- int(result)
count <- as.numeric(result)
count
typeof(count)
shiny::runApp()
dbDisconnect(con)
shiny::runApp()
shiny::runApp('~/edsa/edsa_app/select_project')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/edsa/edsa_app/select_project')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
