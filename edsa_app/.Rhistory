c = c(5, 6, 7, 8)
min(a,b,c)
pmin(a,b,c)
b = c(-9, 10, -8, 7)
pmin(a,b,c)
a
b
c
names(tree)
mean(tree$CHRB)
mean(tree$LFBM)
colum = "LFBM"
mean(tree$column)
column = LFBM
column = "LFBM"
mean(tree$column)
summary(tree)
a
a = sort(a,decreasing=TRUE)
a
min(a)
max(a)
sum(a)
help(Distrbutions)
help(Distributions)
dnorm(0)
dnorm(0)*sqrt(2*pi)
sqrt(2*pi)
dnorm(0,mean=4)
dnorm(0,mean=4, sd=10)
v = c(0,1,2)
dnorm(v)
x = seq(-20,20,by=.1)
x
y = dnorm(x)
plot(x,y)
y = dnorm(x,mean=2.5,sd=0.1)
plot(x,y)
y = dnorm(x)
plot(x,y)
pnorm(0)
pnorm(1)
pnorm(0,mean=2)
pnorm(0,mean=2,sd=3)
v = c(0,1,2)
pnorm(v)
y = pnorm(x)
plot(x,y)
y = pnorm(x,mean=3,sd=4)
plot(x,y)
pnorm(0,lower.tail=FALSE)
pnorm(1,lower.tail=FALSE)
pnorm(0,mean=2,lower.tail=FALSE)
v = c(0.1,0.3,0.75)
x = seq(0,1,by=.05)
y = qnorm(x,mean=3,sd=2)
plot(x,y)
y = qnorm(x,mean=3,sd=0.1)
plot(x,y)
rnorm(4)
rnorm(4, mean=3)
a = rnorm(4, mean=3)
a
avg(a)
mean(a)
a = rnorm(4, mean=3)
mean(a)
a = rnorm(4, mean=3,sd=3)
a
mean(a)
a = rnorm(4, mean=3,sd=3)
mean(a)
y = rnorm(200)
hist(y)
y = rnorm(200,mean=-2)
hist(y)
y = rnorm(200,mean=-2,sd=4)
hist(y)
qqnorm(y)
qqline(y)
x = seq(0,50,by=1_)
x = seq(0,50,by=1)
y = dbinom(x,50,0.2)
y
plot(x.y)
plot(x,y)
read.csv(file="~/Downloads/w1.dat",sep=",",head=TRUE)
w1 = read.csv(file="~/Downloads/w1.dat",sep=",",head=TRUE)
names(w1)
stripchart(w1$vals)
stripchart(w1$vals,method="stack")
stripchart(w1$vals,method="jitter")
stripchart(w1$vals,method="jitter")
stripchart(w1$vals,method="jitter")
stripchart(w1$vals,method="stack",main='Lead BioMass in High C02 Environment',xlab='BioMass of Leaves')
hist(w1$vals)
hist(w1$vals,main="Distribution of w1",xlab="w1",ylab="the stuff")
hist(w1$vals,breaks=2)
hist(w1$vals,breaks=4)
hist(w1$vals,breaks=6)
hist(w1$vals,breaks=7)
hist(w1$vals,breaks=12)
hist(w1$vals,breaks=12,xlim=c(0,10))
hist(w1$vals,breaks=12,xlim=c(-1,2))
hist(w1$vals,breaks=12,xlim=c(0,2))
hist(w1$vals,breaks=12,xlim=c(1,1.3))
hist(w1$vals,breaks=12,xlim=c(0.9,1.3))
hist(w1$vals,main="Leaf BioMass in High C02 Environment",xlab="BioMass of LEaves")
title('Nope Nope Nope',xlab="nurble")
title('',xlab="")
hist(w1$vals)
title('Nope Nope Nope',xlab="nurble")
title('              ',xlab="      ")
hist(w1$vals,main="Leaf BioMass in High C02 Environment",xlab="BioMass of Leaves",ylim=c(0,16))
stripchart(w1$vals,add=TRUE,at15.5)
stripchart(w1$vals,add=TRUE,at=15.5)
boxplot(w1$vals)
boxplot(w1$vals,main='Leaf BioMass in High C02 Environment',ylab='BioMass of Leaves')
boxplot(w1$vals,main='Leaf BioMass in High C02 Environment',ylab='BioMass of Leaves',horizontal=TRUE)
hist(w1$vals,main="Leaf BioMass in High C02 Environment",xlab="BioMass of Leaves",ylim=c(0,16))
boxplot(w1$vals,horizontal=TRUE,at=15.5,add=TRUE,axes=FALSE)
stripchart(w1$vals,add=TRUE,at=15)
tree$C = factor(tree$C)
tree$N = factor(tree$N)
boxplot(tree$STBM,main"Stem BioMass in Different C02 Enviornments",ylab='BioMass of Stems')
boxplot(tree$STBM,main="Stem BioMass in Different C02 Enviornments",ylab='BioMass of Stems')
boxplot(tree$STBM~tree$C)
plot(tree$STBM,tree$LFBM)
cor(tree$STBM,tree$LFBM)
qqnorm(w1$vals)
qqline(w1$vals)
x = rnorm(10,sd=5,mean=20)
y = 2.5*x - 1.0 + rnorm(10,sd=9,mean=0)
cor(x,y)
plot(x,y)
qqline(x,y)
x = rnorm(10,sd=5,mean=20)
y = 2.5*x - 1.0 + rnorm(10,sd=9,mean=0)
cor(x,y)
plot(x,y,xlab="Independent",ylad="Dependent",main="Random Stuff")
x1 = runif(8,15,25)
warnings()
y1 = 2.5*x1 -1.0 + runif(8,-6,6)
points(x1,y1,col=2)
points(x1,y1,col=3,pch=2)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
warnings()
points(x1,y1,col=3,pch=2)
x2 = runif(8,15,25)
y2 = 2.5*x2 - 1.0 + runif(8,-6,6)
points(x2,y2,col=4,pch=3)
legend(14,70,c("Original","one","two"),col=c(1,3,4),pch=(1,2,3))
legend(14,70,c("Original","one","two"),col=c(1,3,4),pch=c(1,2,3))
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
xHigh = x
yHigh = y + abs(rnorm(10,sd=3.5))
xLow=x
yLow = y - abs(rnorm(10,sd=3.1))
arrows(xHigh,yHigh,xLow,yLow,col=2,angel=90,length=0.1,code=3)
arrows(xHigh,yHigh,xLow,yLow,col=2,angle=90,length=0.1,code=3)
numbderWhite = rhyper(400,4,5,3)
warning()
warnings()
numberWhite = rhyper(400,4,5,3)
numberChipped = rhyper(400,2,7,3)
par(mfrow=c(1,2))
plot(numberWhite,numberChipped,xlab="Number White Marbles Drawn",ylab="Number Chipped Marbles Drawn",main="Pulling Marbles")
plot(jitter(numberWhite),jitter(numberChipped),xlab="Number White Marbles Drawn",ylab="Number Chipped Marbles Drawn",main="Pulling Marbles")
par(mfrow=c(2,3))
boxplot(numberWhite,main="first plot")
boxplot(numberChipped,main="second plot")
plot(jitter(numberWhite),jitter(numberChipped),xlab="Number White Marbles Drawn",ylab="Number Chipped Marbles Drawn",main="Pulling Marbles with Jitter")
hist(numberWhite,main="fourth plot")
hist(numberChipped,main="fifth plot")
mosaicplot(table(numberWhite,numberChipped),main="sixth plot")
numberWhite = rhyper(30,4,5,3)
numberWhite
numberChipped = rhyper(30,2,7,3)
numberChipped
smoothscatter(numberWhite,numberChipped,xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
smoothScatter(numberWhite,numberChipped,xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
par(1,1)
smoothScatter(numberWhite,numberChipped,xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
par(mfrow=c(1,1))
smoothScatter(numberWhite,numberChipped,xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
grid(4,3)
uData = rnorm(20)
vData = rnorm(20,mean=5)
wData = uData + 2*vData + rnorm(20,sd=0.5)
xData = -2*uData+rnorm(20,sd=0.1)
yData = 3*vData+rnorm(20,sd=2.5)
d = data.frame(u=uData,v=vData,w=wData,x=xData,y=yData)
pairs(d)
x = c(-1,1,1,-1,-1)
y = c(-1,-1,1,1,-1)
plot(x,y)
polygon(x,y,col='blue')
stdDev = 0.75
x = seq(-5,5,by=0.01)
x
y = dnorm(x,sd=stdDev)
right = qnorm(0.95,sd=stdDev)
plot(x,y,type="l",xaxt="n",ylab="p",xlab=expression(paste('Assumed Distribution of ',bar(x))),axes=FALSE,ylim=c(0,max(y)*1.05),xlim=c(min(x),max(x)),frame.plot=FALSE)
axis(1,at=c(-5,right,0,5),pos = c(0,0),labels=c(expression(' '),expression(bar(x)[cr]),expression(mu[0]),expression(' ')))
axis(2)
xReject = seq(right, 5,by=0.01)
yReject = dnorm(xReject,sd=stdDev)
polygon(c(xReject,xReject[length(xReject)],xReject[1]),c(yReject,0,0),col='red')
x = seq(0,2*pi,by=pi/100)
y = x
xg = (x*0+1) %*% t(y)
yg = (x) %*% t(y*0+1)
f = sin(xg+yg)
persp(x,y,f,theta=-10,phi=40)
summary(beaver1)
?dnorm
y = dnorm(x,sd=stdDev)
dnrom(0)
dnorm(0)
dnorm(0,mean=0,sd=1)
dnorm(0,mean=10000000000,sd=1)
dnorm(0,mean=10000000000,sd=10000000000000000)
dnorm(0,mean=10,sd=1)
x = seq(-20,20,by=.1)
y = dnorm(x)
plot(x,y)
y = dnorm(x,2)
plot(x,y)
y = dnorm(x,2,2)
plot(x,y)
?dnorm
mean=summary(beaver1)$temp
mean=summary(beaver1$temp)
mean=summary(beaver1$temp).mean
mean=summary(beaver1)$temp
y = dnorm(x,mean(beaver1$temp),std(beaver1$temp))
?mean
?stdev
?stddev
?std
y = dnorm(x,mean(beaver1$temp),sd(beaver1$temp))
summary(beaver)
summary(beaver1)
y = dnorm(30:0.1:40,mean(beaver1$temp),sd(beaver1$temp))
y = dnorm(seq(30,40,by=0.1),mean(beaver1$temp),sd(beaver1$temp))
x=seq(30,40,by=0.1)
plot(x,y)
string = "beaver1$temp"
?eval
eval(string)
local(string)
eval(2 ^ 2 ^ 3)
expression(string)
library("scidb")
library("scidb")
scidbconnect()
a <- as.scidb(matrix(rnorm(500*500),500))
install_github("SciDBR","Paradigm4")
library("scidb")
library(scidb)
install.packages('scidb')
library(scidb)
library(scidb)
library("scidb")
library('devtools')
install.packages()
library('dev_tools')
library('devtools')
install_github("SciDBR","paradigm4",quick=TRUE)
install.packages
install.packages("devtools", dependencies = TRUE)
library('devtools')
library('devtools')
install_github("SciDBR","paradigm4",quick=TRUE)
install.packages("devtools", dependencies = TRUE)
library('devtools')
install_github("SciDBR","paradigm4",quick=TRUE)
library('scidb')
scidb --version
which scidb
numberWhite = rhyper(30,4,5,3)
numberChipped = rhyper(30,2,7,3)
install.packages('shiny')
run_example("02_text")
runExample("02_text")
library(shiny)
runExample("02_text")
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
h1("My title")
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/test_app')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/widget_examples')
shiny::runApp('shiny_projects/noodle')
shiny::runApp('shiny_projects/noodle')
shiny::runApp('shiny_projects/noodle')
shiny::runApp('shiny_projects/noodle')
shiny::runApp('shiny_projects/noodle')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
shiny::runApp('shiny_projects/census-app')
counties <- read("~/shiny_projects/census_app/data/counties.rds")
counties <- readRDS("~/shiny_projects/census_app/data/counties.rds")
summary(counties)
head(counties)
install.packages(c("maps","mapproj"))
library(maps)
library(mapproj)
source("census_app/helpers.R")
source("~/shiny_projects/census_app/helpers.R")
percent_map(counties$white, "darkgreen", "% white")
shiny::runApp('shiny_projects/census_app')
shiny::runApp('shiny_projects/census_app')
shiny::runApp('shiny_projects/census_app')
shiny::runApp('shiny_projects/census_app')
shiny::runApp('shiny_projects/census_app')
runApp('stock_vis')
runApp('~/shiny_projects/stock_vis')
install.packages(quantmod)
install.packages('quantmod')
runApp('~/shiny_projects/stock_vis')
shiny::runApp('edsa/edsa_app')
dbDisconnect(con)
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
dbDisconnect(con)
shiny::runApp('edsa/edsa_app')
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
shiny::runApp('edsa/edsa_app')
dbDisconnect(con)
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('shiny_projects/html_tag_examples')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
install.packages('PKI')
install.packages('openssl')
install.packages('libssl-dev')
install.packages('openssl-devel')
install.packages('openssl-devel')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp('edsa/edsa_app')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
iinstall.packages('gsubfn')
install.packages('gsubfn')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
